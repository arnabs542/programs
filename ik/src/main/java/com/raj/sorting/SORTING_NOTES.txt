# QuickSort vs MergeSort:
    Quicksort is an in-place sorting algorithm, that is, it does not require any extra space to perform sorting of an array.
    On the other hand, merge sort requires O(n*logn) auxiliary space. However, the worst-case time complexity of
    quicksort is O(n^2) because the time complexity depends on the selection of pivot. On the other hand, for mergesort,
    the worst-case time complexity is always O(n*logn).

# Why Merge Sort for LinkedList & Quick sort for Arrays:
  - https://www.geeksforgeeks.org/why-quick-sort-preferred-for-arrays-and-merge-sort-for-linked-lists/
  - LL: Aux space for merge routine in constant as swap can be done easily with ptrs. So, no extra space required.
  - Arrays: QSort requires a lot of shuffling and locality of reference is good w/ arrays.

# How to build a Max Heap using a MinHeap (Python only provide MinHeap)? Just negate the numbers and use minHeap.

# When asked for kth smallest / largest distance, think of:
    => QuickSelect with O(n) avg case, if list is already given (NON-STREAMING CONTEXT)
    => If it's a STREAMING CONTEXT, then k sized Binary heap with O(n log k) complexity
        -> minHeap if k largest elements as we need to peek the min of max k elems, everytime we see a new num
        -> maxHeap if k smallest elements as we need to know the max of min k elems, everytime we see a new num
        -> Insert into k sized min heap, if the new num is greater than min (tip of iceberg, other elems are definitely larger than top)

# Find Median of streaming numbers?
    => Median is  .......(median)....... middle element of a sorted array. We'll need to keep track of all numbers.
    => But only peek at the median element, others can stay left or right
    => eg. 1,2,3,4,(5,6),7,8,9,10
        --> left elements increasing & we need to know about it's max i.e. 5 => maxHeap
        --> right elements increasing & we need to know about it's min i.e. 6 => minHeap
    => Keep balancing the heaps as we insert elements in either of the heaps so as to maintain at max 1 element size diff
    => O(nlogn)

# Merge k sorted lists?
    => k sized minHeap. Insert elements, move ptr from the list this element is taken. Pop min & keep inserting.
    => We'll need to keep track of arr index when poped, so that we can insert from that list

# Sort Big File of 500 GB that can't fit in memory of 1GB?
    => Chunk file into 1GB sizes. Load 1GB chunk in memory, sort it and store it in disk. Repeat 500 times.
    => Now we have 500 sorted part files. We need to assemble them using merge subroutine - but can't use 500 ptrs!!
    => Use a minHeap of size 1GB (which is easier). Fill up Heap first cycling thru part files.
    => Keep track of which element is from which part file in heap. eg. Element {int num; File file; long offset;}
    => Then once full, pop an elem, which will be the min and save it to final result file.
    => After popping, find & add the next element from the file from where it was popped.
    => Rinse & repeat. Finally we have the sorted file.