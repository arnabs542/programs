
=== FEW POINTS TO REMEMBER BEFORE AN INTERVIEW ===
01. TIME THE INTERVIEW - Start a STOP WATCH.
    -> Need time to write code, run, debug, test etc else you fail the interview.
02. ASK FOR AN INPUT & OUTPUT FOR THE GIVEN QUESTION.
    -> This is bare minimum the interviewer should provide.
03. Read the question few times.
04. Think which pattern / topic this problem belongs to.
05. Take the given example, try to work out the logic.
    -> Sometimes, taking a simpler example other than the given, may be easier to solve.
06. Come out with naive / brute force solution. Talk about it's complexity.
    -> It will either use loops.
    -> Or recursion, if loops aren't very obvious.
07. ASK FOR HINTS if coming up with Brute Force is a problem.
08. Optimize on naive brute force, discuss approach & complexity.
09. ASK FOR HINTS if stuck or coming up with Optimized Solution is a problem. Use paper to run through examples again.
10. Try a completely different approach if still stuck.
11. WRITE CODE
    -> Start writing code after 20 mins, regardless of the most optimized solution.
    -> If problem is Hard, Brute Force may still get you through sometimes.
    -> If optimized version's skeleton is clear, write TBD functions & complete.
12. WALK-THROUGH CODE with an example.
13. DEBUG - Find bugs during code walk through & fix promptly.
14. WRITE TEST CASES
    -> Happy paths
       - Input test case given & couple of variations of it
    -> Trivial test cases
       - 1 char, 2 char, repeating chars etc
    -> Boundary condition test cases
       - empty, null, zeros etc
    -> Negative test cases
       - Negative values, space, special chars etc
    -> One complex / big test case


=== THINGS TO IMPROVE ===
01. TIME MANAGEMENT
    -> running short of time & the biggest issue so far, failing to run code/test thoroughly is costing points.
    -> Practice with stopwatch.
02. Fully ENGAGE with the interviewer
    -> Answering Side Questions during interview in a manner that satisfies them completely.
    -> eg. What can be said about ...?
    -> Stating things to very minute detail - eg. complexity of BST - O(logn) vs correct O(height of tree)
    -> Need to thoroughly understand/solve in head & focus w/ clear mind to be able to answer completely.
03. Missing Base/Obvious Cases
    -> For a recursive problem/tree, can't afford to miss Base cases.
    -> eg. missed if n==null, return <> for tree problem, while everything else was correct.
04. Don't involve interviewers for guesswork like, will it work? Is this fine? Make decisions and move on.
    -> Solving problems on your own without taking much hints is the key.

=== HANDLING REJECTIONS ===
01. https://www.youtube.com/watch?v=DBBSdh5cmtI
    - All successful people have gone through rejections and improvised. They have failed 100 times before being successful.
    - Make rejections part of yourself. Like in dating u may fail 100 times, but you just need one 'Yes', so goes for interviews.
    - Failures are free & opportunity to improve slightly.
    - You don't need 10 job offers, maybe 1-2 is fine.
02. Most interviewers decide 'yes' or 'no' not just on your coding but also communication, approach, ability to take hints etc.
    - Try to make an impact while speaking. If the interviewer is on your side, they will drop enough hints to get you through.
    - If they are pissed with something, even if you ace, they'll put a -ve feedback on some ignorable flags.