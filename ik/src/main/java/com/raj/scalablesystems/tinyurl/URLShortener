=== URL Shortener ===
https://www.educative.io/courses/grokking-the-system-design-interview/m2ygV4E81AR

# Requirements: Shorten a url & vice-versa

# Capacity Estimation:
- Monthly Users?
World Population = 7 Billion (7,000,000,000)
10% connected to internet = 700 M => ~500M users (say monthly)

- Storage?
Storage (5 yrs) = 500,000,000 x 12 x 5 x 1KB (avg url size) = 30 x 1,000,000,000 KB = 30 TB
1 CPU can handle, say 1000 read qps & 100 write qps & has 1 TB space
DB boxes = 30

- App VMs?
App boxes = 500,000,000 users / (30 days x ~100,000secs) = 170 writes/sec (17K reads/sec assuming 1:100 write to read ratio)
=> 5 boxes for write, 20 boxes for read

B/W reqd => 1 Box can support upto 1Gb/s => 170 Kb/s writes, 17 Mb/s reads shud be good as well

How to shorten URL w/ minimum chars? Using Base64 encoded MD5/SHA256 Hash
=> We can compute a unique hash (e.g., MD5 or SHA256, etc.) of the given URL. The hash can then be encoded for displaying.
=> Use Base64 encoding on generated Hash => 8 base64 digits should cover 280 Trillion combinations (64^8)

Services - Login(user_id as UUID for each user to store in DB, saves space), TinyUrl service

APIs:
String post(url,uuid - optional) => POST /tinyurl/url/{url}?user=uuid
String get(tinyUrl,uuid - optional) => GET /tinyurl/tinyurl/{tinyurl}?user=uuid

KV DB:
user_name / email_id -> user_id, password
base64 encoded tinyurl -> big url

UUID generation =>
1> Random
2> md5 hash = 128bit / 6 for each base64 char (as 2^6 = 64) => 21 chars in total
3> DB based seq number (odd/even servers for availability & some parallelism)
4> Range based allocation - each server when asking for a sequence, pulls 10000 sequences at once so that it can
allocate for a while without going to DB again.

Sharding:
Consistent Hashing - Choose  a high value of n say 1000 (adding a shard becomes easy, u just reassign hash ranges)
user_id % 1000 gives the shard #
Zookeeper holds the config of a shard holding user_id hash ranges, say shard 1 holds 0-100....

