package com.raj.recursion;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class StringsFromWildCard {

    /**
     * You are given string s of length n, having m wildcard characters '?', where each wildcard character represent
     * a single character. Write a program which returns list of all possible distinct strings that can be generated by
     * replacing each wildcard characters in s with either '0' or '1'.
     *
     * 1?0? => ["1000", "1001", "1100", "1101"]
     */
    public static void main(String[] args) {
        System.out.println(Arrays.toString(recur("1?0?")));
    }

    /**
     * Runtime = O(n*(2^m)) where n is length of s string and m is number of ‘?’ (wild card) characters in s string.
     * As, two recursive calls will be made when s[i] == '?', and there are total m '?' and n for creating the string which is added to res
     *
     * Aux space = O(n) ... As at any time we are maintaining current possible string generated in the solution and length of that string can be n.
     * Total space = same as runtime as we store all outputs
     */
    static String[] recur(String s) {
        List<String> res = new ArrayList<>();
        f(s.toCharArray(), 0, res);
        return res.toArray(new String[res.size()]);
    }

    static void f(char[] s, int i, List<String> res) {
        if (i == s.length) {
            res.add(new String(s));
            return;
        }

        if (s[i] == '?') {  // if wildcard, try subs

            // substitute 0 for ?
            s[i] = '0'; f(s, i+1, res);

            // substitute 1 for ?
            s[i] = '1'; f(s, i+1, res);

            // revert substitution
            s[i] = '?';

        } else {    // otherwise move ahead
            f(s, i+1, res);
        }
    }

}
