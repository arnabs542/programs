
=== FEW POINTS TO REMEMBER BEFORE AN INTERVIEW ===
01. TIME THE INTERVIEW - Start a STOP WATCH.
02. ASK FOR AN INPUT & OUTPUT FOR THE GIVEN QUESTION.
    -> This is bare minimum the interviewer should provide.
03. Read the question few times.
04. Think which pattern / topic this problem belongs to.
05. Take the given example, try to work out the logic.
    -> Sometimes, taking a simpler example other than the given, may be easier to solve.
06. Come out with naive / brute force solution. Talk about it's complexity.
    -> It will either use loops.
    -> Or recursion, if loops aren't very obvious.
07. ASK FOR HINTS if coming up with Brute Force is a problem.
08. Optimize on naive brute force, discuss approach & complexity.
09. ASK FOR HINTS if stuck or coming up with Optimized Solution is a problem.
10. Try a completely different approach if still stuck.
11. WRITE CODE
    -> Start writing code after 20 mins, regardless of the most optimized solution.
    -> If problem is Hard, Brute Force may still get you through sometimes.
    -> If optimized version's skeleton is clear, write TBD functions & complete.
12. WALK-THROUGH CODE with an example.
13. DEBUG - Find bugs during code walk through & fix promptly.
14. WRITE TEST CASES
    -> Happy paths
       - Input test case given & couple of variations of it
    -> Trivial test cases
       - 1 char, 2 char, repeating chars etc
    -> Boundary condition test cases
       - empty, null, zeros etc
    -> Negative test cases
       - Negative values, space, special chars etc
    -> One complex / big test case
