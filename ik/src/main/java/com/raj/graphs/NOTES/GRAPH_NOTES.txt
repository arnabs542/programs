# Toughest things about graphs is to identify it's a graph problem. Once it's identified, there are only few things to apply:
  => BFS, DFS, Visited, Cycle
  => Finding Shortest / closest - BFS
  => Finding Connected components / Longest / Path b/w nodes / detect cycles - DFS

# Graph Representations:
  G(V,E) => Set of Vertices & Edges.
  v -> w* => We need to represent vertices & connection b/w them as edges somehow.
  Most basic thing we are looking for is - given a Vertex v, find all neighbors w (optimize this based on problem)

  => Edge Lists
     -> [(v1,v2), (v1,v3), (v2,v3), (v2,v4), (v3,v5)]
     -> May be directed/undirected. Neighbors can be found by iterating the edge list

  => Adjacency List
     -> List<Integer>[] adjList = new List[V];
     -> adjList[0] represents vertex 0 & its list value represents the List of neighbors

  => Adjacency Map
     -> Map<String,List<Integer>> map = new HashMap<>();
     -> Similar to above except that it's a map. Convenient if vertex aren't numeric.

  => 2D Grid
     -> each row i represents a vertex and a value 1 at col j represents its connected (or its weight)


# Algo Design Manual- Steven Skiena

# Degree of a node is the number of edges coming into a vertex. What's the sum of degree of all vertices?
    => Undirected : 2|E| as each edge will be counted twice, eg. A --- B (2)
    => Directed : In-degree Sum = Out-degree Sum = |E| as each edge will be counted once, eg. A ---> B (1,1)

==== Eulerian Cycle & Paths ====
# Hamiltonian Cycle problem & Travelling Salesman problem - NP Hard problems. No known polynomial time algo. It's mostly exponential time.
# Eulerian Cycle : Go through each edge exactly once & come back to the starting vertex, then it's a Eulerian cycle,
if not then it's an Eulerian Path (starts & ends at different vertices).
  => Hamiltonian cycle is about visiting each vertex exactly once vs Eulerian which is about visiting vertex once.
  => For a connected graph, it will always have an Eulerian cycle if -
     -> It's undirected & has all Even degree vertices.
     -> It's directed & in-degree = out-degree of all vertices.
     -> We can find Eulerian cycle path by backtracking(when all edges aren't visited) & doing mini-walks from last V.

# Number of odd degree vertices has to be even (can't be odd as Sum of degrees = 2|E| & odd+even = odd which contradicts it)

# Number of vertices with odd degree:
  => 0 - Eulerian Cycle
  => 2 - Eulerian Path
  => 4,6,8... - No Eulerian Cycle / Paths

# Max number of edges in a Graph can be O(num_vertices^2). Graph representation largely depends upon how we store edges as they can be of order of C(n choose 2)=O(n^2) in worst case.
Hence, a simple operation like finding all neighbors of a vertex, might become O(n*m)=>O(n^3) operation eg. edge list representation.

# Trees don't have cycles, unlike Graphs. Graphs would always need visited tracking therefore.
# BFS Graph traversal can have exponential space complexity O(2^h), if branching out factor is large, like in trees.
# DFS Graph traversal will usually incur space complexity O(h) until recursion Stack depth

# For Graph problems, both DFS & BFS incurs O(m+n) runtime & O(n) space complexity for visited, where n=vertices & m=edges.

# A graph is Bipartite, if we can split the vertices into 2 subsets such that edges go b/w 2 sets. Graph is Bipartite if -
  => No cycles - Yes
  => Odd length Cycles = Cross edge in the same layer - No

# Topological sort is an ordering of vertices of a graph going left(u) to right(v).
  => Topo can't be done for graph with cycles.
  => In other words graph has to be a DAG (Undirected graphs too we can do topo sort provided there are no cycles)
  => Cycle detection becomes very important, where we fail fast instead of going into endless loop.
  => Can be done using DFS. Maintain visited = 0 for unvisited, 1 for being visited, 2 for completely visited
     -> Visit unvisited vertices in any order, mark them as 1 and dfs on it's neighbors
     -> If a neighboring vertex state is 1, it means it's a loop, Abort!
     -> Now this vertex state is 2, add it to result.
  => Can be done using BFS (Kahn's algo). Use in-degrees for each vertex, maintain a count of done vertices.
     -> Start with a zero degree vertex, add to Queue
     -> For each of it's neighbors, decrease in-degree count. Any new zero-degree vertex is added to Queue.
     -> Now this vertex state is 2, add it to result. Increment count of done vertices.
     -> If done vertex count isn't equal to num vertices, then it's a cycle.
  => When a problem refers a DAG, first thing to try is Topological Sort, then do what u need to find like - shortest path, schedule etc in second pass.

# Shortest Path Algos: https://en.wikipedia.org/wiki/Shortest_path_problem
  1. Topological sorting
     -> Weighted DAG - solve the single-source shortest path problem in linear time, Θ(E + V)

  2. Dijkstra's
     -> solves the single-source shortest path problem with non-negative edge weight.
     -> handles cycles by disregarding visited vertex as it'll have longer dist, works for both directed & undirected
     -> O((V+E).logV), with Fib Heap its O(E+VlogV)

  3. Bellman–Ford
     -> solves the single-source problem if edge weights may be negative.
     -> O(V.E)
     -> no negative cycles meaning edge can be -ve but a cycle shudn't result in overall -ve cost, otherwise u cud go infinite times.
     -> does edge relaxation with every other node in graph thereby arriving at shortest weighted path.
     -> suits for distributed systems like routers(no need to know full graph), each can do edge relaxation with adj nodes independently and figure out shortest path to other nodes eventually after V-1 pass.
     -> https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/
     -> https://www.geeksforgeeks.org/comparison-dijkstras-floyd-warshall-algorithms/

  4. A* search
     -> solves for single pair shortest path using heuristics to try to speed up the search.

  5. Floyd–Warshall
     -> solves all pairs shortest paths.

# Path Finding Algos:
  - For unweighted graphs, both BFS & DFS shortest path has O(bf^depth) runtime. But DFS has O(depth) vs BFS's O(bf^depth).
  - BFS is usually preferred mostly but comes at the expense of huge memory (last level will have O(b^d) nodes in worst case)
  - To optimize, we can use Bidirectional Search to reduce both time & space to O(b^(d/2)) as we explore from both source & dest simultaneously.
  - Or use a combination of DFS & BFS - Iterative Deepening DFS - https://www.geeksforgeeks.org/iterative-deepening-searchids-iterative-deepening-depth-first-searchiddfs/
    - In every call, DFS is restricted from going beyond given depth. So basically we do DFS in a BFS fashion.
  - For weighted graphs use Dijkstra's algo. A* works better where it picks node based on heuristics (cost to this node from src + approx cost to dest)
  - A* is thus a special case of Dijkstra's where we use heuristics(x) apart from node weight. A* performance hence depends on heuristics.

# A* Search: https://www.geeksforgeeks.org/a-search-algorithm/
  - A* Search algos, unlike other path finding algos, has “brains” to guide approx optimal path in a grid w/ obstacles.
  - Uses heuristics(exact which requires expensive precomputation or faster approx technique like Manhattan / Diagonal / Euclidean dist).
  - Maps, Robotics & Games use this algo to find the approx shortest path very efficiently.

# So when to use DFS over A*, when to use Dijkstra over A* to find the shortest paths?
1) One Source and One Destination -
→ Use A* Search Algorithm (For Unweighted as well as Weighted Graphs)

2) One Source, All Destination –
→ Use BFS (For Unweighted Graphs)
→ Use Dijkstra (For Weighted Graphs without negative weights)
→ Use Bellman Ford (For Weighted Graphs with negative weights)

3) Between every pair of nodes-
→ Floyd-Warshall
→ Johnson’s Algorithm