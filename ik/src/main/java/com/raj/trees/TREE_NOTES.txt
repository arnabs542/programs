# Search/Insert complexity in a BST?
Refrain from saying O(logn) as it's only valid if B-tree is balanced.
Consider a tree which is having only right ptrs 1->2->3->4->5, it can have worst case complexity of O(n),
but O(height) is a correct answer still as height is n here.

# Can we re-construct a b-tree with inorder & preorder traversal sequences?
  -> Yes, inorder tells (left subtree) root (right subtree).
  -> Preorder tells root, left, right. Using preorder seq, find if a node lies in left or right.

# Inorder traversal of a Binary Search Tree yields a sorted sequence
# BST can be re-constructed from
  -> Pre OR Post order (we know the root) using the fact that left node < root < right node
  -> Can't from Inorder as we don't know the root

# Passing object ptrs to a method is pass by value (meaning the reference is copied & passed over),
so changing object vars will be permanent, but changing the object ptr won't be visible outside the method.
https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value
  -> This is important to remember otherwise unexpected things will happen like when we pass a prev Tree.Node ptr
     and re-assign it in the helper method, it won't be visible. Hence, consider making them static if u need them to be
     permanent or create a class for it.

# Most problem rely on building up sub-solutions from leaf levels & final answer is achieved by doing something 
  very trivial with left subtree,right subtree & root answers. 
  -> Build up in bottom fashion by doing Post Order or DFS.
  -> Use answers from left & right subtrees and keep building upwards.
  -> Use a class if many dimensions needs to be returned for each recursive call to left/right.

# Traverse tree using stack - sometimes a problem can only be solved optimally using this technique. So brush up on it.
  -> Push in reverse order of how u wud want them to be printed

# Balancing Trees: (guaranteed O(logn) searches)
 * AVL - https://www.youtube.com/watch?v=msU79oNPRJc&feature=youtu.be
   + Strictly balanced, hence searches are faster
   - More costs to rotations to re-balance recursively
 * Red-Black Trees - https://www.youtube.com/watch?v=UaLIHuR1t8Q
   + More suited for too many insert/deletes
   - Not perfectly balanced
   - Preferred choice for DS in C++ & Java(TreeMap and TreeSet)

# Other Trees:
 * B-Tree - https://stackoverflow.com/questions/870218/what-are-the-differences-between-b-trees-and-b-trees
   + Keys and records both are stored in the internal as well as leaf nodes.
   + Searches faster for keys which are near to root
   - Sequential access might be difficult
 * B+ Tree - https://www.javatpoint.com/b-plus-tree
   + Balanced Tree w/ data always at leaf levels
   + The internal nodes (keys to access records) of the B+ tree are stored in the main memory whereas, leaf nodes are stored in the secondary memory.
   + Choice for RDBMS Indexes - https://www.essentialsql.com/what-is-a-database-index/
   + Leaf nodes of a B+ tree are linked together in the form of a singly linked lists to make the search/range queries more efficient
 * Ternary Search Trees - Used in place of Tries to store strings w/ space tradeoff
   + Tries use 26 ptrs for each node, TST has space advantage as it has 3 ptrs (<, =, >)
   + O(length_of_word + depth of tree) searches
   + Suited for "Near Neighbor Lookups" like Spell checks, Auto-complete, Nearest Neighbor etc