=== NETFLIX System Design ===

# Microservices:

Zone LB (Tier1) => Elastic LB (Tier2) => Microservices => Router (Consistent Hashing) => Cache + DB

* User Account - Create / Login
  - user_id, email, pwd_hash
  - cache + DB
  - multi-profiles in same account
  - billing

* Movie Transcoding

  NewMovie => Read in Chunks => Parallel Transcoding into diff formats => (DB+Cache) & Kafka => AmazonS3 & OpenConnect CDNs

  - Ingest new movies, each movie is transcoded into different format
  - ((movie_id,format),part_num),s3_blob_uri
  - break movie into 1 mins chunks which is sorted by part # and stored in sorted order
  - Save part num info for a movie in zookeeper (we can use S3 for blob storage)
  - May create hot spots on shard if CDN fails. We can modify schema to - (movie_id,format,partNum),s3_bytes_chunk_uri
  - Kafka will preferably PUSH data to open connect CDNs, else they'll be cached in CDN Edge Server at time of play.
  - Server-side: In a typical configuration, a hardware encoder takes audio-video input, encodes it as H.264 video and AAC audio, and outputs it in an MPEG-2 Transport Stream
    the stream is then broken into a series of short media files (.ts possibly 10s) by a software stream segmenter.
    The segmenter also creates and maintains an index(.m3u8) file containing a list of the media files.
    Both the media fils and the index files are published on the web server.
    Client-side: client reads the index, then requests the listed media files in order and displays them without any pauses or gaps between segments.


* Recommendation
 https://youtu.be/Eeg1DEeWUjA
 Hybrid design involving both Content based & Collaborative filtering
 Following recommendations can be made which are rendered as separate carousels:
  -> [Personalized recommendation]
     - Inspired by User's Playback History & personal preferences
  -> [Content based recommendation] Content based filtering ML models - by genre, by actor, by language etc
     - Features of the movies itself like Sci-Fi, Artist, Year, Country of origin, find similarities b/w movies
  -> [Collaborative recommendation] Other's of similar interests also watched
     - Collaborative Filtering ML models - Match users of similar interests and predict
     - For instance, if user A and B have watched a bunch of same videos, it’s highly likely that user A will like videos liked by B. Of course, there are many ways to define what “similar” means here. It could be two users have liked same videos, it could also mean that they share the same location.
  -> [Knowledge based recommendation] - deterministic based on knowledge graph models
  -> Sponsored Module - Paid for by advertisers but still relevant to user by targeting customer segments
  -> Trending Content module -  based on recent trends
  -> Use clicks, views info from App to train models & precompute recco modules (offline for each use) or live compute in runtime
  -> Schema DB+Cache: user_id, pre-computed json module with movie_ids
  -> Fallback - give static response so that modules load in case of failures

* Search
  -> While ingesting movie, sent meta content to Search Service to Index on Title, Genre, Year etc
  -> Inverted Index - Lucene Based Search Solution like ES / Solr etc

* Trends
  -> As requests for movie playback come, playback service can send those signals to trending service to analyze trends per geo location as well as globally
  -> Aggregate on last 1 hour trends (movie_id,play_count) into Kafka -> DB -> Hive
  -> Run Spark MR jobs to create hourly/daily trends

* Playback Service
  -> Renders Playback module
     - While streaming from App, it will buffer upto 30 secs content. If slow internet, it will downgrade bit format. This logic lives on the App side and is real time.
  -> Save & retrieve user's last state - user_id, state json (movie_id, part_num or episode seen)
  -> Send state info every few secs from App via http to AWS servers so that logging into a diff device can continue playing from where we left
  -> User sends request for "play". AppServers retrieves state to resume(if any) movie from cache/db & chunks info from ZK (movie_id,parts_uris)
  -> Sends back to user Client which then connects to CDNs to retrieve movie parts
  -> Connection to App & CDNs can be a duplex,websocket(alive) connection

# Deployment:
-> Cache static movie content in CDNs. Netflix has it's own CDN n/w called OpenConnect throughout the globe.
-> All streaming content is delivered via OpenConnect(after u hit "play")
-> Everything else is from AWS servers(netflix deployed services) around globe, i.e. before u hit "play"
   including all of the logic of the application interface, the content discovery and selection experience, recommendation algorithms etc.

